name: pipeline

on: [push]

jobs:
  build-ubuntu:
    uses: ./.github/workflows/test.yaml
    with:
      operating_sytem: ubuntu-latest

  build-macos:
    uses: ./.github/workflows/test.yaml
    with:
      operating_sytem: macos-latest

  build-windows:
    uses: ./.github/workflows/test.yaml
    with:
      operating_sytem: windows-latest


  version-check:
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos, build-windows]
    name: Verify version has been increased
    outputs:
      run_deploy: ${{ steps.verify.outputs.run_deploy }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install necessary package for scripts to run
        run: pip install packaging

      - name: Verify that the version has been increased
        id: verify
        run: echo "::set-output name=run_deploy::$(python scripts/version_verification.py $(python scripts/extract_version.py) $(cat VERSION))"

  release:
    needs: version-check
    runs-on: ubuntu-latest
    name: Releasing package
    if: ${{ needs.version-check.outputs.run_deploy == 'yes' && github.ref == 'refs/heads/master' }}
    env:
      TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
      TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Needed for changelog generation
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install release packages
        run: pip install wheel gitchangelog pystache

      - name: Ensure clean dist/ and build/ folders
        run: rm -rf dist build
        continue-on-error: true

      - name: Build release
        run: python setup.py sdist bdist_wheel

      - name: Extract last version tag
        run: echo "previous_tag=$(python scripts/extract_version.py)" >> $GITHUB_ENV

      - name: Extract wheel artifact name
        run: echo "wheel_name=$(echo dist/*.whl)" >> $GITHUB_ENV

      - name: Extract tar.gz artifact name
        run: echo "tar_name=$(echo dist/*.tar.gz)" >> $GITHUB_ENV

      - name: Pull tags from the repo
        run: git pull --tags

      - name: Generate full changelog
        run: gitchangelog | sed "s/(unreleased)/$(cat VERSION) ($(date -f %Y-%m-%d))/" > CHANGELOG.md

      - name: Make commit for auto-generated changelog
        uses: EndBug/add-and-commit@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          add: 'CHANGELOG.md'
          message: '!gitchangelog'

      - name: Generate version changelog for release
        run: |
          gitchangelog $previous_tag..HEAD | sed "s/## (unreleased)/Krait v$(cat VERSION)/" > version_changelog.md


      - name:  Create Github release & upload files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: hub release create -a $wheel_name -a $tar_name -F version_changelog.md $(cat VERSION)

      - name: Install Twine
        run: pip install twine

      - name: Release package
        run: twine upload dist/*
